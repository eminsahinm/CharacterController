//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Game/Platform-Specific/Input/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Game.Platform.Input
{
    public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Move"",
            ""id"": ""ac78ba0c-2c4b-45a6-8dd7-92a4e8ee7f92"",
            ""actions"": [
                {
                    ""name"": ""Keys"",
                    ""type"": ""Value"",
                    ""id"": ""96959499-acf1-4c48-876e-4941dd56e242"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7f07875f-88df-4456-9fe5-18c80764dac2"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Keys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""ad2e8ea7-2330-41f8-88b8-6d61a7ecb7b7"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Keys"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d9eb6725-086e-40db-ad9e-5427db045d7c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Keys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e0fa7db2-ac1f-495e-8f22-d07da41bbf3e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Keys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""17c172c7-112d-4c31-90b6-0b1ffb855fd6"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Keys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1285a655-6706-4290-ac98-9355eb0bd155"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Keys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Jump"",
            ""id"": ""c2d52b20-2487-4230-8f27-1072e8ce01be"",
            ""actions"": [
                {
                    ""name"": ""Keys"",
                    ""type"": ""Button"",
                    ""id"": ""c1b67d53-d54a-4049-be99-474fd8de642f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f47e0787-a7f3-449d-8633-f718a1455f84"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Keys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c4e9bc50-4327-4aad-abaf-3eea82a21c3a"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Keys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1363aadf-b58e-4dd4-ae45-374d5fd30d0f"",
                    ""path"": ""<DualShockGamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Keys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Simple Attack"",
            ""id"": ""a72025fe-b5b7-465e-be99-f8909f890598"",
            ""actions"": [
                {
                    ""name"": ""Keys"",
                    ""type"": ""Button"",
                    ""id"": ""3a7739b7-fe56-4d5e-8968-026436d43190"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0d93f63e-c375-4cce-a09d-4bc6782634fc"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Keys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dcc6fed8-67f6-4dfd-bd49-b4269f28ab04"",
                    ""path"": ""<DualShockGamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Keys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3f5aa968-1b22-4cd4-a4cd-33cc1819f71f"",
                    ""path"": ""<XInputController>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Keys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Run"",
            ""id"": ""6f1a3195-7800-4614-a25e-314ddc867b2b"",
            ""actions"": [
                {
                    ""name"": ""Keys"",
                    ""type"": ""Button"",
                    ""id"": ""7d8d4b42-dd19-43de-86e4-0af7898e7977"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7d9527ef-a95b-4303-b435-645f7d8a6d24"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Keys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""66cc59bc-1a44-4139-a4f6-ac9b2884e4fb"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Keys"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Move
            m_Move = asset.FindActionMap("Move", throwIfNotFound: true);
            m_Move_Keys = m_Move.FindAction("Keys", throwIfNotFound: true);
            // Jump
            m_Jump = asset.FindActionMap("Jump", throwIfNotFound: true);
            m_Jump_Keys = m_Jump.FindAction("Keys", throwIfNotFound: true);
            // Simple Attack
            m_SimpleAttack = asset.FindActionMap("Simple Attack", throwIfNotFound: true);
            m_SimpleAttack_Keys = m_SimpleAttack.FindAction("Keys", throwIfNotFound: true);
            // Run
            m_Run = asset.FindActionMap("Run", throwIfNotFound: true);
            m_Run_Keys = m_Run.FindAction("Keys", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Move
        private readonly InputActionMap m_Move;
        private List<IMoveActions> m_MoveActionsCallbackInterfaces = new List<IMoveActions>();
        private readonly InputAction m_Move_Keys;
        public struct MoveActions
        {
            private @PlayerInputActions m_Wrapper;
            public MoveActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Keys => m_Wrapper.m_Move_Keys;
            public InputActionMap Get() { return m_Wrapper.m_Move; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MoveActions set) { return set.Get(); }
            public void AddCallbacks(IMoveActions instance)
            {
                if (instance == null || m_Wrapper.m_MoveActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_MoveActionsCallbackInterfaces.Add(instance);
                @Keys.started += instance.OnKeys;
                @Keys.performed += instance.OnKeys;
                @Keys.canceled += instance.OnKeys;
            }

            private void UnregisterCallbacks(IMoveActions instance)
            {
                @Keys.started -= instance.OnKeys;
                @Keys.performed -= instance.OnKeys;
                @Keys.canceled -= instance.OnKeys;
            }

            public void RemoveCallbacks(IMoveActions instance)
            {
                if (m_Wrapper.m_MoveActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IMoveActions instance)
            {
                foreach (var item in m_Wrapper.m_MoveActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_MoveActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public MoveActions @Move => new MoveActions(this);

        // Jump
        private readonly InputActionMap m_Jump;
        private List<IJumpActions> m_JumpActionsCallbackInterfaces = new List<IJumpActions>();
        private readonly InputAction m_Jump_Keys;
        public struct JumpActions
        {
            private @PlayerInputActions m_Wrapper;
            public JumpActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Keys => m_Wrapper.m_Jump_Keys;
            public InputActionMap Get() { return m_Wrapper.m_Jump; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(JumpActions set) { return set.Get(); }
            public void AddCallbacks(IJumpActions instance)
            {
                if (instance == null || m_Wrapper.m_JumpActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_JumpActionsCallbackInterfaces.Add(instance);
                @Keys.started += instance.OnKeys;
                @Keys.performed += instance.OnKeys;
                @Keys.canceled += instance.OnKeys;
            }

            private void UnregisterCallbacks(IJumpActions instance)
            {
                @Keys.started -= instance.OnKeys;
                @Keys.performed -= instance.OnKeys;
                @Keys.canceled -= instance.OnKeys;
            }

            public void RemoveCallbacks(IJumpActions instance)
            {
                if (m_Wrapper.m_JumpActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IJumpActions instance)
            {
                foreach (var item in m_Wrapper.m_JumpActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_JumpActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public JumpActions @Jump => new JumpActions(this);

        // Simple Attack
        private readonly InputActionMap m_SimpleAttack;
        private List<ISimpleAttackActions> m_SimpleAttackActionsCallbackInterfaces = new List<ISimpleAttackActions>();
        private readonly InputAction m_SimpleAttack_Keys;
        public struct SimpleAttackActions
        {
            private @PlayerInputActions m_Wrapper;
            public SimpleAttackActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Keys => m_Wrapper.m_SimpleAttack_Keys;
            public InputActionMap Get() { return m_Wrapper.m_SimpleAttack; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(SimpleAttackActions set) { return set.Get(); }
            public void AddCallbacks(ISimpleAttackActions instance)
            {
                if (instance == null || m_Wrapper.m_SimpleAttackActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_SimpleAttackActionsCallbackInterfaces.Add(instance);
                @Keys.started += instance.OnKeys;
                @Keys.performed += instance.OnKeys;
                @Keys.canceled += instance.OnKeys;
            }

            private void UnregisterCallbacks(ISimpleAttackActions instance)
            {
                @Keys.started -= instance.OnKeys;
                @Keys.performed -= instance.OnKeys;
                @Keys.canceled -= instance.OnKeys;
            }

            public void RemoveCallbacks(ISimpleAttackActions instance)
            {
                if (m_Wrapper.m_SimpleAttackActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ISimpleAttackActions instance)
            {
                foreach (var item in m_Wrapper.m_SimpleAttackActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_SimpleAttackActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public SimpleAttackActions @SimpleAttack => new SimpleAttackActions(this);

        // Run
        private readonly InputActionMap m_Run;
        private List<IRunActions> m_RunActionsCallbackInterfaces = new List<IRunActions>();
        private readonly InputAction m_Run_Keys;
        public struct RunActions
        {
            private @PlayerInputActions m_Wrapper;
            public RunActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Keys => m_Wrapper.m_Run_Keys;
            public InputActionMap Get() { return m_Wrapper.m_Run; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(RunActions set) { return set.Get(); }
            public void AddCallbacks(IRunActions instance)
            {
                if (instance == null || m_Wrapper.m_RunActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_RunActionsCallbackInterfaces.Add(instance);
                @Keys.started += instance.OnKeys;
                @Keys.performed += instance.OnKeys;
                @Keys.canceled += instance.OnKeys;
            }

            private void UnregisterCallbacks(IRunActions instance)
            {
                @Keys.started -= instance.OnKeys;
                @Keys.performed -= instance.OnKeys;
                @Keys.canceled -= instance.OnKeys;
            }

            public void RemoveCallbacks(IRunActions instance)
            {
                if (m_Wrapper.m_RunActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IRunActions instance)
            {
                foreach (var item in m_Wrapper.m_RunActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_RunActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public RunActions @Run => new RunActions(this);
        public interface IMoveActions
        {
            void OnKeys(InputAction.CallbackContext context);
        }
        public interface IJumpActions
        {
            void OnKeys(InputAction.CallbackContext context);
        }
        public interface ISimpleAttackActions
        {
            void OnKeys(InputAction.CallbackContext context);
        }
        public interface IRunActions
        {
            void OnKeys(InputAction.CallbackContext context);
        }
    }
}
